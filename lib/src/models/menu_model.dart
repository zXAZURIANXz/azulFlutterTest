// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

class MenuModel {
    List<MenuResult> menu;
    List<Advertising> advertising;
    PrivacyNotice privacyNotice;
    List<ShareApp> shareApp;

    MenuModel({
        this.menu,
        this.advertising,
        this.privacyNotice,
        this.shareApp,
    });
}

class Advertising {
    List<Io> ios;
    List<Android> android;
    List<Window> windows;
    List<Video> videos;

    Advertising({
        this.ios,
        this.android,
        this.windows,
        this.videos,
    });
}

class Android {
    List<Smartphone> smartphone;
    List<Smartphone> tablet;

    Android({
        this.smartphone,
        this.tablet,
    });
}

class Smartphone {
    String position;
    String url;
    String active;
    String showtime;
    String adUnitId;
    String width;
    String height;
    String swipes;
    String notes;

    Smartphone({
        this.position,
        this.url,
        this.active,
        this.showtime,
        this.adUnitId,
        this.width,
        this.height,
        this.swipes,
        this.notes,
    });
}

class Io {
    List<Smartphone> iphone;
    List<Smartphone> ipad;

    Io({
        this.iphone,
        this.ipad,
    });
}

class Video {
    String position;
    String section;
    String url;
    String active;

    Video({
        this.position,
        this.section,
        this.url,
        this.active,
    });
}

class Window {
    List<Windows> windowsPhone;
    List<Windows> windows8;

    Window({
        this.windowsPhone,
        this.windows8,
    });
}

class Windows {
    String position;
    String url;
    String active;
    String showtime;
    String swipes;

    Windows({
        this.position,
        this.url,
        this.active,
        this.showtime,
        this.swipes,
    });
}


/* *********************************** */
/*                                     */
/*        MODELO PARA EL MENÃ™          */
/*                                     */
/* *********************************** */
class MenuResult {
    String name;
    String displayname;
    String url;
    bool isNewsletter;
    String color;
    String secondColor;
    List submenu;

    MenuResult({
        this.name,
        this.displayname,
        this.url,
        this.isNewsletter,
        this.color,
        this.secondColor,
        this.submenu,
    });

    MenuResult.fromJsonMap(Map<String, dynamic> json){
      
      name         = json['name'];
      displayname  = json['displayname'];
      url          = json['url'];
      isNewsletter = json['isNewsletter'];
      color        = json['color'];
      secondColor  = json['secondColor'];
      submenu      = json['submenu'];
    
    }
      
}

class MenusResults {

  List<MenuResult> items = new List();

  MenusResults();

  MenusResults.fromJsonList(List<dynamic>  jsonList ){

    if( jsonList == null ) return;

    for(var item in jsonList ){

      final menuresult = new MenuResult.fromJsonMap(item);
      items.add( menuresult );

    }


    
  }


}


/* *********************************** */
/*                                     */
/*       MODELO PARA EL SUBMENU        */
/*                                     */
/* *********************************** */


class SubmenuResult {
    String name;
    String displayname;
    String url;
    bool isNewsletter;
    String color;
    String secondColor;
    List<dynamic> submenu;
    String urlWindows;

    SubmenuResult({
        this.name,
        this.displayname,
        this.url,
        this.isNewsletter,
        this.color,
        this.secondColor,
        this.submenu,
        this.urlWindows,
    });

    SubmenuResult.fromJsonMap(Map<String, dynamic> json){
      
      name         = json['name'];
      displayname  = json['displayname'];
      url          = json['url'];
      isNewsletter = json['isNewsletter'];
      color        = json['color'];
      secondColor  = json['secondColor'];
      submenu      = json['submenu'];
      urlWindows   = json['urlWindows'];

    }



}


class SubmenuResults {

  List<SubmenuResult> items = new List();

  SubmenuResults();

  SubmenuResults.fromJsonList(List<dynamic>  jsonList ){

    if( jsonList == null ) return;

    for(var item in jsonList ){

      final submenuresult = new SubmenuResult.fromJsonMap(item);
      items.add( submenuresult );

    }

    
  }


}










class PrivacyNotice {
    String title;
    String content;

    PrivacyNotice({
        this.title,
        this.content,
    });
}
class ShareApp {
    String platform;
    String url;

    ShareApp({
        this.platform,
        this.url,
    });
}
